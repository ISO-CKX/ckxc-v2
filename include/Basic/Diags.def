#ifndef DIAG_TEMPLATE
#define DIAG_TEMPLATE(ID, TMPSTR)
#endif

DIAG_TEMPLATE(Example, "redefinition of '{}':")
DIAG_TEMPLATE(Example2, "'{}' first defined here:")

/// Lexical issues
DIAG_TEMPLATE(ErrExpectedDigit, "Expected digit here")
DIAG_TEMPLATE(ErrUnexpectedChar, "Unexpected character '{}'")
DIAG_TEMPLATE(ErrUnexpectedCharInContext,
              "Unexpected character '{}' in {} context")
DIAG_TEMPLATE(WarnInvalidConversion,
              "Invalid conversion sequence '\\{}'")

/// Syntactic issues
DIAG_TEMPLATE(ErrExpectedGot, "Unexpected {}, expected {}")
DIAG_TEMPLATE(ErrUnexpectedInContext, "Unexpected token '{}' in {} context")
DIAG_TEMPLATE(NoteNoAnonymousDecl, "There is no anonymous decl in ckx-lang")
DIAG_TEMPLATE(NoteNoForwardDecl, "There is no normal forward decl in ckx-lang")
DIAG_TEMPLATE(NoteOneTypeInValueCtor, \
              "Sorry, only one type in one value-ctor is allowed")
DIAG_TEMPLATE(NoteEnumeratorSep, \
              "ckx-lang enumerators separates with ';' instead of ','")

/// Semantic issues
DIAG_TEMPLATE(ErrDupTyspec, "duplicate type specifier '{}'")
DIAG_TEMPLATE(ErrNotDeclared, "'{}' used before declare")
DIAG_TEMPLATE(ErrRedefinition, "redefinition of '{}':")
DIAG_TEMPLATE(ErrRedeclaration, "redeclaration of '{}':")
DIAG_TEMPLATE(NoteFirstDefined, "'{}' first defined here:")
DIAG_TEMPLATE(NoteFirstDeclaredHere, "'{}' first declared here:")
DIAG_TEMPLATE(ErrFuncCannotOverload, "two impls of '{}' cannot overload")
DIAG_TEMPLATE(ErrNotScope, "{} is not a class, enum, ADT or module")
DIAG_TEMPLATE(ErrAmbiguousScope, "multiple {} found in {}")
DIAG_TEMPLATE(ErrAmbiguous, "multiple {} found")

#undef DIAG_TEMPLATE
